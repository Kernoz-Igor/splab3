#include <iostream>
using namespace std;

int main()
{
    // Инициализация матрирцы
    const int n = 5;
    int matrix[n * n];
    int *dd = matrix;

    asm(
            "mov %[dd], %%rax       \n\t"       // Кидаем адрес начала матрицы в rax
            "mov %[n], %%rbx        \n\t"       // Кидаем размероность массива в rbx
            "xor %%rcx, %%rcx       \n\t"       // Обнуляем счетчик первого цикла (i)
        
        "ll:                        \n\t"       // Метка первого цикла (который проходит по строкам)
            "xor %%rsi, %%rsi       \n\t"       // Обнуляем счетчик второго цикла (j)

        "pp:                        \n\t"       // Метка второго столбца (проходит по каждому элементу строки
            "cmpl %%esi, %%ecx      \n\t"       // Сравнение i == j
            "je set_1               \n\t"       // Если да, то прыгаем в установку 1

            "mov $1, %%rdx          \n\t"       // Все это проверяет i + j == n - 1,
            "add %%rsi, %%rdx       \n\t"       // можно это изменить на
            "add %%rcx, %%rdx       \n\t"       // i + j + 1 == n
            "cmpl %%edx, %%ebx      \n\t"
            "je set_1           \n\t"       // Если равны, то прыгаем на установку 1

            "movl $0, (%%rax)        \n\t"       // В остальных случаях ставим 0 по ад. rax
            "jmp end_set_1               \n\t"       // Перепрыгиваем установку 1

        "set_1:                     \n\t"       // Установка 1
            "movl $1, (%%rax)        \n\t"       // Кидаем 1 по адресу rax
            
        "end_set_1:                 \n\t"
            "inc %%rsi              \n\t"       // Увеличение j на 1 (счетчик второго цикла)
            "add $4, %%rax          \n\t"       // Смещение адреса массива на 1 элемент (int = 4 байта)
            "cmpl %%esi, %%ebx      \n\t"       // Дошел ли j до конца строки
            "jne pp                 \n\t"       // Если нет, то прыгаем в начало второго цикла


            "inc %%rcx              \n\t"       // Увеличение i на 1 (счетчик первого цикла)
            "cmpl %%ebx, %%ecx      \n\t"       // Дошел ли i до последней строки
            "jne ll                 \n\t"       // Если нет, то прыгаем в начало первого цикла
            :
            :[dd]"m"(dd), [n]"m"(n)                     // Используемые переменные из проги
            :"%rax", "%rbx", "%rcx", "%rdx", "%rsi"     // Используемые регистры во вставке
       );

    // Вывод матрицы
    cout << "MATRIX: " << endl;
    for (int i = 0; i< n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cout << matrix[j + i * n] << "  ";
        }
        cout << endl;
    }
}
